Application = React.createClass({
	getInitialState: function() {
		return {
			userLogged: false
		};
	},
	
	render: function(){
		return (
			<div>
				<AppNav app={this} ref="nav" />
				<AppBody app={this} ref="body" page={this.props.page || "battle" || "index"} />
			</div>
		);
	}
});

Menu = React.createClass({
	getInitialState: function() {
		return {
		};
	},
	
	getDefaultItems: function(){
		return {
			items: [
				{
					text: "Action",
				},
				{
					text: "Support",
					active: true,
				},
				{
					divider: true
				},
				{
					text: "Footer",
				},
			]
		};
	},
	
	render: function(){
		var items = this.props.items;
		return (
			<ul>
			{items.map(function(item){
				if(item.divider){
					return <li className="divider" />;
				}
				return <li className={item.active ? "active" : ""} key={item.text} href="#">{item.text}</li>;
			})}
			</ul>
		);
	}
});

ArmyEntity = React.createClass({
	render: function(){
		if(1)
		return (
			<div className="block-army-ent">
				<span className="span-army-ent-quantity">{this.props.data.quantity}</span>
				<img className="img-army-ent" src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} />
			</div>
		);
		
		return (
			<div className="col-md-2">
				<div className="thumbnail">
					<p><img className="img-responsive2" style={{width:"100%"}} src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} /></p>
					<table className="table table-striped table-condensed" style={{marginBottom:0}}>
						<colgroup>
							<col span="1" style={{width:"100%"}} />
							<col />
						</colgroup>
						<tr className="info">
							<td>Количество</td>
							<td style={{textAlign:"right"}}>{this.props.data.quantity}</td>
						</tr>
						<tr>
							<td>Атака</td>
							<td style={{textAlign:"right"}}>14</td>
						</tr>
						<tr>
							<td>Защита</td>
							<td style={{textAlign:"right"}}>5</td>
						</tr>
						<tr>
							<td>Здоровье</td>
							<td style={{textAlign:"right"}}>20</td>
						</tr>
					</table>
				</div>
			</div>
		);
		
		return (
			<div className="col-md-2">
				<div className="thumbnail" style={{position:"relative"}}>
					<img className="img-responsive2" style={{width:"100%"}} src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} />
					<div style={{position:"absolute", right:"10px", bottom:"10px"}}>q:{this.props.data.quantity}</div>
				</div>
			</div>
		);
	}
});

ArmyItem = React.createClass({
	render: function(){
		if(1)
		return (
			<div className="block-army-item">
				<span className="span-army-item-quantity">{this.props.data.quantity}</span>
				<img className="img-army-item" src={sprintf("assets/img/items/item-%04d.png", this.props.data.item_id)} />
			</div>
		);
	}
});

Army = React.createClass({
	handleClickNewEnt: function(event){
		console.log('handleClickNewEnt');
		event.preventDefault();		
	},
	
	componentDidMount: function(){
		var self = this;
		$("#army-commander-name-"+self.props.data.id).editable({
			title: <%=json.encode(_T.EDIT_NAME)%>,
			ajaxOptions: { dataType: 'json' },
			// mode: "inline",
			url: <%=json.encode(@controller.createUrl{controller="api", action="saveArmyName"})%>,
			// name: "name",
			pk: self.props.data.id,
			/* params: function(params){
				params.id = self.props.data.id;
				return params;
			}, */
			success: function(response, newValue){
				// console.log("response", response, newValue);
				setTimeout(function(){
					$("#army-commander-name-"+self.props.data.id).editable("setValue", response.value, true);
				}, 1);
			},
			error: function(response, newValue){
			},
		});
	},
	
	componentWillUnmount: function(){
		$("#army-commander-name-"+this.props.data.id).editable("destroy");
	},
	
	render: function(){
		var entities = this.props.data.entities.map(function(ent, i){
			// console.log("render ent", ent);
			return (
				<ArmyEntity data={ent} index={i} key={sprintf("army-%d-ent-%d", ent.army_id, ent.ent_id)} />
			);
		}.bind(this));
		entities.push(
			<div className="block-army-ent">
				<a href onClick={this.handleClickNewEnt}><img className="img-army-ent" src={sprintf("assets/img/entities/ent-%04d.png", 0)} /></a>
			</div>
		);
		
		var items = [];
		for(var i = 1; i <= 28; i++){
			var item = {item_id: i, type: 1, quantity: 1+(Math.random() * 10)|0};
			items.push(
				<ArmyItem data={item} index={i} key={sprintf("army-%d-item-%d", this.props.data.id, item.item_id)} />
			);
		}
		
		return (
			<div className="row">
				<div className="col-lg-12 col-md-12 col-sm-12 col-xs-12">
					<div className="list-group">
					  <div className="list-group-item list-group-item-danger">
						<a href id={"army-commander-name-"+this.props.data.id}>{this.props.data.name}</a>
					  </div>
					  <div className="list-group-item">
						<div className="row">
							<div className="col-lg-2 col-md-2 col-sm-2 col-xs-2">
								<p><img style={{width:"100%"}} src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} /></p>
							</div>
							<div className="col-lg-3 col-md-3 col-sm-3 col-xs-3">
								<table className="table table-striped table-condensed table-army-info">
									<colgroup>
										<col span="1" style={{width:"100%"}} />
										<col />
									</colgroup>
									<thead>
										<tr>
											<th colSpan="4">Командир</th>
										</tr>
									</thead>
									<tr>
										<td>Атака</td>
										<td className="info" style={{textAlign:"right", whiteSpace:"nowrap"}}><b>3</b> <span className="label label-success">+2</span></td>
										<td style={{textAlign:"right", whiteSpace:"nowrap"}}><b>14</b> <span className="label label-success">+10</span></td>
									</tr>
									<tr>
										<td>Защита</td>
										<td className="info" style={{textAlign:"right", whiteSpace:"nowrap"}}><b>0</b></td>
										<td style={{textAlign:"right"}}><b>5</b></td>
									</tr>
									<tr>
										<td>Здоровье</td>
										<td style={{textAlign:"right", whiteSpace:"nowrap"}} colSpan="3"><b>27</b> <span className="label label-danger">-73</span></td>
									</tr>
									<tr>
										<td>Зарплата</td>
										<td style={{textAlign:"right"}} colSpan="3"><b>20</b> <span className="label label-warning">+12</span></td>
									</tr>
									<tr>
										<td>Скорость</td>
										<td style={{textAlign:"right"}} colSpan="3"><b>5</b></td>
									</tr>
								</table>
								<table className="table table-striped table-condensed table-army-info table-no-bottom">
									<colgroup>
										<col span="1" style={{width:"100%"}} />
										<col />
									</colgroup>
									<thead>
										<tr>
											<th colSpan="4">Отряд</th>
										</tr>
									</thead>
									<tr>
										<td>Существ</td>
										<td style={{textAlign:"right"}} colSpan="3"><b>3020</b></td>
									</tr>
									<tr>
										<td>Атака</td>
										<td className="info" style={{textAlign:"right", whiteSpace:"nowrap"}}><b>300</b></td>
										<td style={{textAlign:"right"}}><b>1489</b></td>
									</tr>
									<tr>
										<td>Защита</td>
										<td className="info" style={{textAlign:"right", whiteSpace:"nowrap"}}><b>120</b></td>
										<td style={{textAlign:"right"}}><b>1300</b></td>
									</tr>
									<tr>
										<td>Здоровье</td>
										<td style={{textAlign:"right"}} colSpan="3"><b>2000</b></td>
									</tr>
									<tr>
										<td>Скорость</td>
										<td style={{textAlign:"right"}} colSpan="3"><b>4</b></td>
									</tr>
								</table>
							</div>
							<div className="col-lg-7 col-md-7 col-sm-7 col-xs-7">
								{entities}
							</div>
						</div>
					  </div>
					  <div className="list-group-item list-group-item-info">
						Предметы
					  </div>
					  <div className="list-group-item">
						<div className="row">
							<div className="col-lg-12 col-md-12 col-sm-12 col-xs-12">
								{items}
							</div>
						</div>
					  </div>
					</div>		
				</div>
			</div>
			/*
			<div className="row">
				<div className="col-md-12">
					<h3>Отряд №{this.props.index+1}</h3>
				</div>
				<div className="thumbnail">
					<div className="col-md-2">
						<img style={{width:"100%"}} src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} />
					</div>
				</div>
				{entities}
			</div>
			*/
		);
	}
});

LoadingSpan = React.createClass({
	getInitialState: function() {
		return {loading: true};
	},
	
	render: function(){
		if(this.state.loading){
			return <img className="img-loading" src="assets/img/loading.gif" />;
		}
		return <span className="span-loading-dummy" />;
	}
});

AppBodyArmy = React.createClass({
	getInitialState: function() {
		return {army: []};
	},
	
	setLoadingState: function(value){
		this.refs.loadingSpan.setState({loading: value});
	},
	
	componentDidMount: function(){
		this.setLoadingState(true);
		loadJSON({
			url: <%=json.encode(@controller.createUrl{controller="api", action="army"})%>,
			success: function(result){
				console.log("army loaded", result);
				this.setLoadingState(false);
				if(this.isMounted()){
					this.setState({army: result.data});
				}
			}.bind(this),
			error: function(){
				console.log("army load error", arguments);
				this.setLoadingState(false);
			}.bind(this),
		});
		
	},
	
	render: function(){
		var army = this.state.army.map(function(army, i){
			// console.log("render army", army);
			return (
				<Army data={army} index={i} key={"army-"+army.id} />
			);
		}.bind(this));
		return (
			<div>
				<div className="row" key="title">
					<div className="col-md-12">
						<div className="page-header">
							<h1><%=_T.MENU_ARMY%> &nbsp;<LoadingSpan ref="loadingSpan" /></h1>
						</div>
					</div>
				</div>
				{army}
			</div>
		);
	}
});

AppBodyTest = React.createClass({
	render: function(){
		return (
			<div>
				<div className="row">
					<div className="col-md-6">
						<h1>Hello, world!</h1>
						<Panel />
					</div>
					<div className="col-md-6">
						<Panel />
					</div>
				</div>
			</div>		
		);
	}
});

AppBodyIndex = React.createClass({
	render: function(){
		return (
			<div>
				<div className="row">
					<div className="col-md-12">
						<h1>Hello, world!</h1>
						<Panel />
					</div>
					<div className="col-md-6">
						<Panel />
					</div>
				</div>
			</div>		
		);
	}
});

BATTLE_CELLS_WIDTH = <%=BATTLE_CELLS_WIDTH%>;
BATTLE_CELLS_HEIGHT = <%=BATTLE_CELLS_HEIGHT%>;

BATTLE_CELL_WIDTH = <%=BATTLE_CELL_WIDTH%>;
BATTLE_CELL_HEIGHT = <%=BATTLE_CELL_HEIGHT%>;

var addBattleMapEnt = function(map, x, y, ent_id){
	if(map[x] === undefined){
		map[x] = {}
	}
	map[x][y] = {ent_id: ent_id, type: 1, quantity: 1+(Math.random() * 10)|0};
}

BattleEntity = React.createClass({
	render: function(){
		return (
			<a href className="block-battle-ent">
				<span className="span-battle-ent-quantity">{this.props.data.quantity}</span>
				<img className="img-battle-ent" src={sprintf("assets/img/entities/ent-%04d.png", this.props.data.ent_id)} />
			</a>
		);
	}
});		

AppBodyBattleOld = React.createClass({
	render: function(){
		var cells = [];
		var battleMap = {
		
		};
		addBattleMapEnt(battleMap, 0, 1, 1);
		addBattleMapEnt(battleMap, 0, 4, 2);
		// addBattleMapEnt(battleMap, 0, 7, 3);
		addBattleMapEnt(battleMap, 1, 2, 4);
		addBattleMapEnt(battleMap, 1, 5, 6);
		addBattleMapEnt(battleMap, 1, 3, 7);
		
		var lx = BATTLE_CELLS_WIDTH-1
		addBattleMapEnt(battleMap, lx, 0, 9);
		addBattleMapEnt(battleMap, lx, 3, 11);
		addBattleMapEnt(battleMap, lx, 5, 13);
		addBattleMapEnt(battleMap, lx-1, 4, 12);
		addBattleMapEnt(battleMap, lx-1, 1, 15);
		
		var cx = classNames;
		for(var y = 0; y < BATTLE_CELLS_HEIGHT; y++){
			for(var x = 0; x < BATTLE_CELLS_WIDTH; x++){
				var classes = {
					"div-battle-cell": true,
					// "bg-warning": x === 0,
				};
				var cellContent = "";
				if(battleMap[x] !== undefined && battleMap[x][y] !== undefined){
					mapEnt = battleMap[x][y];
					var className = x < BATTLE_CELLS_WIDTH/2 ? "battle-ent-enemy" : "battle-ent-my";
					// cellContent = <img className={className} style={{width:"100%"}} src={sprintf("assets/img/entities/ent-%04d.png", mapEnt.item_id)} />
					cellContent = <BattleEntity data={mapEnt} />
				}
				cells.push(
					<div className={cx(classes)} key={x+"-"+y} style={{left:BATTLE_CELL_WIDTH*x, top:BATTLE_CELL_HEIGHT*y, width:BATTLE_CELL_WIDTH+1, height:BATTLE_CELL_HEIGHT+1}}>
						{cellContent}
					</div>
				);
			}
		}
		return (
			<div>
				<div className="row">
					<div className="col-md-12">
						<h1>Battle demo</h1>
					</div>
				</div>
				<div className="row">
					<div className="col-md-12">
						<div className="div-battle-board center-block" style={{width:BATTLE_CELL_WIDTH*BATTLE_CELLS_WIDTH, height:BATTLE_CELL_HEIGHT*BATTLE_CELLS_HEIGHT}}>
							{cells}
						</div>
					</div>
				</div>
			</div>		
		);
	}
});

AppBodyBattleNew = React.createClass({
	render: function(){
		return (
			<div className="row">
				<div className="col-md-12">
					<div className="div-battle-board-new center-block">
						sdhsdkjah
					</div>
				</div>
			</div>
		);
	}
});

AppBody = React.createClass({
	getInitialState: function() {
		return {page: null};
	},
	
	selectPage: function(page){
		playMenuClickSound();
		this.setState({page: page});
	},
	
	render: function(){
		var page = this.state.page || this.props.page;
		console.log("AppBody page: "+page);
		if(page === "army"){
			return <AppBodyArmy app={this.props.app} />;
		}
		if(page === "index"){
			return <AppBodyIndex app={this.props.app} />;
		}
		if(page === "battle"){
			return <AppBodyBattleNew app={this.props.app} />;
		}
		if(page === "battle-old"){
			return <AppBodyBattleOld app={this.props.app} />;
		}
		return <AppBodyTest app={this.props.app} />;
	}
});

LoginForm = React.createClass({
	getInitialState: function() {
		return {form: "login"};
	},
	
	switchToLoginForm: function(event){
		event.preventDefault();
		playMenuClickSound();
		this.setState({form: "login"});
	},
	
	switchToRemembeMeForm: function(event){
		event.preventDefault();
		playMenuClickSound();
		this.setState({form: "rememberMe"});
	},
	
	componentDidMount: function(){
		<%if(RECAPTCHA2_ENABLED){%>
		this.recaptchaWidget = grecaptcha.render('recaptcha-container', {
			'sitekey': <%=json.encode(RECAPTCHA2_SITEKEY)%>,
			'callback': function(response){
				console.log('recaptcha response', response);
			}
        });
		<%} /* RECAPTCHA2_ENABLED */ %>
	},
	
	componentWillUnmount: function(){
		<%if(RECAPTCHA2_ENABLED){%>
		grecaptcha.reset(this.recaptchaWidget);
		<%} /* RECAPTCHA2_ENABLED */ %>
	},
	
	render: function(){
		if(this.state.form === "rememberMe"){
			return (
				<div>
					<%if(true){%><div className="page-header">
						<h1>Remember password</h1>
					</div><%}%>
					<form className="" action="" method="post">
						<%if(RECAPTCHA2_ENABLED){%>
						<div className="form-group" id="recaptcha-container"></div>
						<%} /* RECAPTCHA2_ENABLED */ %>
						<div className="form-group">
							<label className="control-label" htmlFor="LoginForm_username">Username</label>
							<input className="form-control" placeholder="Введите логин или е-майл" type="text" name="LoginForm[username]" id="LoginForm_username" />
						</div>
						<div className="form-group">
							<p><button className="btn btn-primary" type="submit"><span className="glyphicon glyphicon-repeat"></span> Remember password</button></p>
							<p><a href onClick={this.switchToLoginForm}>Login</a></p>
							<p><a href>Create account</a></p>
						</div>
					</form>
				</div>
			);
		}
		return (
			<div>
				<%if(true){%><div className="page-header">
					<h1>Войти</h1>
				</div><%}%>
				<form className="" action="" method="post">
					<%if(RECAPTCHA2_ENABLED){%>
					<div className="form-group" id="recaptcha-container"></div>
					<%} /* RECAPTCHA2_ENABLED */ %>
					<div className="form-group">
						<label className="control-label" htmlFor="LoginForm_username">Username</label>
						<input className="form-control" placeholder="Enter your username" type="text" name="LoginForm[username]" id="LoginForm_username" />
					</div>
					<div className="form-group">
						<label className="control-label" htmlFor="LoginForm_password">Password</label>
						<input className="form-control" placeholder="Enter your password" type="password" name="LoginForm[password]" id="LoginForm_password" />
					</div>
					<div className="checkbox">
						<label>
						  <input type="checkbox" name="LoginForm[remember_me]" id="LoginForm_remember_me" /> Check me out
						</label>
					</div>
					<div className="form-group">
						<p><button className="btn btn-primary" type="submit"><span className="glyphicon glyphicon-ok"></span> Submit</button></p>
						<p><a href onClick={this.switchToRemembeMeForm}>Remember password</a></p>
						<p><a href>Create account</a></p>
					</div>
				</form>
			</div>
		);
	}
});

NavUserItem = React.createClass({
	render: function(){
		if(this.props.app.userLogged){
			
		}else{
			return (
				<li className="dropdown">
				  <a href="#" className="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Войти <span className="caret"></span></a>
				  <div className="dropdown-menu" role="menu">
					<div className="dropdown-menu-login">
						<div className="row">
							<div className="col-md-12">
								<LoginForm app={this.props.app} />
							</div>
						</div>
					</div>
				  </div>
				</li>
			);
		}
	}
});

AppNav = React.createClass({
	getInitialState: function() {
		return {menu: "game"};
	},
	
	handleClickPage: function(page, event){
		event.preventDefault();
		console.log('handleClickPage '+page);
		this.props.app.refs.body.selectPage(page);
	},
	
	render: function(){
		return (
			<nav className="navbar navbar-inverse navbar-fixed-top">
			  <div className="container">

				<div className="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
				  <ul className="nav navbar-nav">
					<li className="dropdown">
					  <a href="#" className="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Menu <span className="caret"></span></a>
					  <ul className="dropdown-menu" role="menu">
						<li><a href onClick={this.handleClickPage.bind(this, "buildings")}><%=_T.MENU_BUILDINGS%></a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "researches")}><%=_T.MENU_RESEARCHES%></a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "production")}><%=_T.MENU_PRODUCTION%></a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "army")}><%=_T.MENU_ARMY%></a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "battle")}><%=_T.MENU_BATTLE%></a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "battle-old")}><%=_T.MENU_BATTLE%> (old)</a></li>
						<li><a href onClick={this.handleClickPage.bind(this, "locality")}><%=_T.MENU_LOCALITY%></a></li>
						<li className="divider"></li>
						<li><a href="#">Separated link</a></li>
						<li className="divider"></li>
						<li><a href="#">One more separated link</a></li>
					  </ul>
					</li>
				  </ul>
				  
				  <form className="navbar-form navbar-left" role="search">
					<div className="form-group">
					  <input type="text" className="form-control" placeholder="Search" />
					</div>
					<button type="submit" className="btn btn-default">Submit</button>
				  </form>
				  
				  <ul className="nav navbar-nav navbar-right">
					<li><a href="#">Link</a></li>
					<li className="dropdown">
					  <a href="#" className="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Dropdown <span className="caret"></span></a>
					  <ul className="dropdown-menu" role="menu">
						<li><a href="#">Action</a></li>
						<li><a href="#">Another action</a></li>
						<li><a href="#">Something else here</a></li>
						<li className="divider"></li>
						<li><a href="#">Separated link</a></li>
					  </ul>
					</li>
					<NavUserItem app={this.props.app} />
				  </ul>
				</div> 
			  
			  </div>
			</nav>
		);
	}
	
});

Panel = React.createClass({
	render: function(){
		return (
			<div className="panel panel-default">
			  <div className="panel-heading">
				<h3 className="panel-title">Panel title</h3>
			  </div>
			  <div className="panel-body">
				Panel content
			  </div>
			</div>
		);
	}
});

